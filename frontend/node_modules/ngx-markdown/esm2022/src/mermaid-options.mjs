/* eslint-disable */
export var MermaidAPI;
(function (MermaidAPI) {
    let SecurityLevel;
    (function (SecurityLevel) {
        /**
         * (default) tags in text are encoded, click functionality is disabled
         */
        SecurityLevel["Strict"] = "strict";
        /**
         * tags in text are allowed, click functionality is enabled
         */
        SecurityLevel["Loose"] = "loose";
        /**
         * html tags in text are allowed, (only script element is removed), click functionality is enabled
         */
        SecurityLevel["Antiscript"] = "antiscript";
        /**
         * with this security level all rendering takes place in a sandboxed iframe.
         * This prevent any javascript running in the context.
         * This may hinder interactive functionality of the diagram like scripts,
         * popups in sequence diagram or links to other tabs/targets etc.
         */
        SecurityLevel["Sandbox"] = "sandbox";
    })(SecurityLevel = MermaidAPI.SecurityLevel || (MermaidAPI.SecurityLevel = {}));
    let Theme;
    (function (Theme) {
        /**
         * Designed to modified, as the name implies it is supposed to be used as the base for making custom themes.
         */
        Theme["Base"] = "base";
        /**
         * A theme full of light greens that is easy on the eyes.
         */
        Theme["Forest"] = "forest";
        /**
         * A theme that would go well with other dark colored elements.
         */
        Theme["Dark"] = "dark";
        /**
         *  The default theme for all diagrams.
         */
        Theme["Default"] = "default";
        /**
         * The theme to be used for black and white printing
         */
        Theme["Neutral"] = "neutral";
    })(Theme = MermaidAPI.Theme || (MermaidAPI.Theme = {}));
    let LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["Debug"] = 1] = "Debug";
        LogLevel[LogLevel["Info"] = 2] = "Info";
        LogLevel[LogLevel["Warn"] = 3] = "Warn";
        LogLevel[LogLevel["Error"] = 4] = "Error";
        LogLevel[LogLevel["Fatal"] = 5] = "Fatal";
    })(LogLevel = MermaidAPI.LogLevel || (MermaidAPI.LogLevel = {}));
})(MermaidAPI || (MermaidAPI = {}));
//# sourceMappingURL=data:application/json;base64,