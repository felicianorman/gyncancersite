import { AsyncPipe } from '@angular/common';
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { merge, of, Subject, timer } from 'rxjs';
import { distinctUntilChanged, map, mapTo, shareReplay, startWith, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
const BUTTON_TEXT_COPY = 'Copy';
const BUTTON_TEXT_COPIED = 'Copied';
export class ClipboardButtonComponent {
    constructor() {
        this._buttonClick$ = new Subject();
        this.copied$ = this._buttonClick$.pipe(switchMap(() => merge(of(true), timer(3000).pipe(mapTo(false)))), distinctUntilChanged(), shareReplay(1));
        this.copiedText$ = this.copied$.pipe(startWith(false), map(copied => copied
            ? BUTTON_TEXT_COPIED
            : BUTTON_TEXT_COPY));
    }
    onCopyToClipboardClick() {
        this._buttonClick$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: ClipboardButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.0", type: ClipboardButtonComponent, isStandalone: true, selector: "markdown-clipboard", ngImport: i0, template: `
    <button
      class="markdown-clipboard-button"
      [class.copied]="copied$ | async"
      (click)="onCopyToClipboardClick()"
    >{{ copiedText$ | async }}</button>
  `, isInline: true, dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: ClipboardButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'markdown-clipboard',
                    template: `
    <button
      class="markdown-clipboard-button"
      [class.copied]="copied$ | async"
      (click)="onCopyToClipboardClick()"
    >{{ copiedText$ | async }}</button>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    standalone: true,
                    imports: [AsyncPipe],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvc3JjL2NsaXBib2FyZC1idXR0b24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFckcsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7QUFDaEMsTUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUM7QUFlcEMsTUFBTSxPQUFPLHdCQUF3QjtJQWJyQztRQWVVLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUVuQyxZQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQ3hDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQ25CLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDUixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUMvQixDQUFDLEVBQ0Ysb0JBQW9CLEVBQUUsRUFDdEIsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7UUFFTyxnQkFBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUN0QyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQ2hCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU07WUFDbEIsQ0FBQyxDQUFDLGtCQUFrQjtZQUNwQixDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FDdEIsQ0FBQztLQUtIO0lBSEMsc0JBQXNCO1FBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0F0QlUsd0JBQXdCO2tHQUF4Qix3QkFBd0IsOEVBWHpCOzs7Ozs7R0FNVCx1REFHUyxTQUFTOzsyRkFFUix3QkFBd0I7a0JBYnBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsUUFBUSxFQUFFOzs7Ozs7R0FNVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQztpQkFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY1BpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG1lcmdlLCBvZiwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgbWFwVG8sIHNoYXJlUmVwbGF5LCBzdGFydFdpdGgsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmNvbnN0IEJVVFRPTl9URVhUX0NPUFkgPSAnQ29weSc7XHJcbmNvbnN0IEJVVFRPTl9URVhUX0NPUElFRCA9ICdDb3BpZWQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdtYXJrZG93bi1jbGlwYm9hcmQnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8YnV0dG9uXHJcbiAgICAgIGNsYXNzPVwibWFya2Rvd24tY2xpcGJvYXJkLWJ1dHRvblwiXHJcbiAgICAgIFtjbGFzcy5jb3BpZWRdPVwiY29waWVkJCB8IGFzeW5jXCJcclxuICAgICAgKGNsaWNrKT1cIm9uQ29weVRvQ2xpcGJvYXJkQ2xpY2soKVwiXHJcbiAgICA+e3sgY29waWVkVGV4dCQgfCBhc3luYyB9fTwvYnV0dG9uPlxyXG4gIGAsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICBpbXBvcnRzOiBbQXN5bmNQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIENsaXBib2FyZEJ1dHRvbkNvbXBvbmVudCB7XHJcblxyXG4gIHByaXZhdGUgX2J1dHRvbkNsaWNrJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG4gIHJlYWRvbmx5IGNvcGllZCQgPSB0aGlzLl9idXR0b25DbGljayQucGlwZShcclxuICAgIHN3aXRjaE1hcCgoKSA9PiBtZXJnZShcclxuICAgICAgb2YodHJ1ZSksXHJcbiAgICAgIHRpbWVyKDMwMDApLnBpcGUobWFwVG8oZmFsc2UpKSxcclxuICAgICkpLFxyXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcclxuICAgIHNoYXJlUmVwbGF5KDEpLFxyXG4gICk7XHJcblxyXG4gIHJlYWRvbmx5IGNvcGllZFRleHQkID0gdGhpcy5jb3BpZWQkLnBpcGUoXHJcbiAgICBzdGFydFdpdGgoZmFsc2UpLFxyXG4gICAgbWFwKGNvcGllZCA9PiBjb3BpZWRcclxuICAgICAgPyBCVVRUT05fVEVYVF9DT1BJRURcclxuICAgICAgOiBCVVRUT05fVEVYVF9DT1BZKSxcclxuICApO1xyXG5cclxuICBvbkNvcHlUb0NsaXBib2FyZENsaWNrKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fYnV0dG9uQ2xpY2skLm5leHQoKTtcclxuICB9XHJcbn1cclxuIl19